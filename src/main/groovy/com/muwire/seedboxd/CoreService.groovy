package com.muwire.seedboxd

import com.muwire.core.Core
import com.muwire.core.MuWireSettings
import com.muwire.core.RouterConnectedEvent
import com.muwire.core.RouterDisconnectedEvent
import com.muwire.core.UILoadedEvent
import com.muwire.core.connection.Connection
import com.muwire.core.files.AllFilesLoadedEvent
import com.muwire.core.hostcache.HostCache
import com.muwire.core.search.ResultsEvent
import com.muwire.core.search.SearchEvent
import com.muwire.core.upload.UploadEvent
import com.muwire.core.upload.UploadFinishedEvent
import com.muwire.core.upload.Uploader
import com.muwire.core.util.BandwidthCounter
import com.muwire.seedboxd.config.I2PConfig
import com.muwire.seedboxd.config.MuWireConfig
import org.springframework.stereotype.Service

import javax.annotation.PostConstruct

@Service
class CoreService {
    private final I2PConfig i2PProperties
    private final MuWireConfig muWireConfig
    
    private Core core
    
    private final SeedboxStatus status = new SeedboxStatus()
    private final List<Uploader> activeUploaders = Collections.synchronizedList(new ArrayList<>())
    private final BandwidthCounter speedOutCounter = new BandwidthCounter(10)
    
    private final Timer timer = new Timer("UpSpeedTracker", true)
    
    CoreService(I2PConfig i2PProperties, MuWireConfig muWireConfig) {
        this.i2PProperties = i2PProperties
        this.muWireConfig = muWireConfig
        this.timer.schedule({collectBandwidth()} as TimerTask, 1000, 1000)
    }
    
    public Core getCore() {
        core
    }
    
    @PostConstruct
    void afterPropertiesSet() {
        // 1. create Home directory
        File home = muWireConfig.getWorkDir()
        if (!home.exists())
            home.mkdirs()
        
        // set i2p.properties
        def i2pProps = new Properties()
        i2pProps['i2cp.tcp.host'] = i2PProperties.getHost().getHostAddress()
        i2pProps['i2cp.tcp.port'] = String.valueOf(i2PProperties.getPort())
        i2pProps['inbound.nickname'] = i2PProperties.getTunnelName()
        i2pProps['outbound.nickname'] = i2PProperties.getTunnelName()
        i2pProps['inbound.length'] = String.valueOf(i2PProperties.getTunnelLength())
        i2pProps['outbound.length'] = String.valueOf(i2PProperties.getTunnelLength())
        i2pProps['inbound.quantity'] = String.valueOf(i2PProperties.getTunnelQuantity())
        i2pProps['outbound.quantity'] = String.valueOf(i2PProperties.getTunnelQuantity())
        
        File i2pPropsFile = new File(home, "i2p.properties")
        i2pPropsFile.withPrintWriter {i2pProps.store(it, "Do not edit this file")}
        
        // set up MuWire settings
        MuWireSettings muWireSettings = new MuWireSettings()
        muWireSettings.nickname = muWireConfig.getNickname()
        muWireSettings.disableUpdates = true
        // TODO: set reasonable defaults for other values
        
        core = new Core(muWireSettings, home, "0.8.12") // version doesn't matter
        status.muwireName = core.me.getHumanReadableName()
        core.eventBus.with {
            register(AllFilesLoadedEvent.class, this)
            register(RouterConnectedEvent.class, this)
            register(RouterDisconnectedEvent.class, this)
            register(UploadEvent.class, this)
            register(UploadFinishedEvent.class, this)
            register(SearchEvent.class, this)
            register(ResultsEvent.class, this)

            publish(new UILoadedEvent())
        }
        core.startServices()
    }
    
    void onAllFilesLoadedEvent(AllFilesLoadedEvent event) {
        status.allFilesLoaded = true
    }
    
    void onRouterConnectedEvent(RouterConnectedEvent event) {
        status.i2pRouterConnected = true
    }
    
    void onRouterDisconnectedEvent(RouterDisconnectedEvent event) {
        status.i2pRouterConnected = false
    }
    
    void onSearchEvent(SearchEvent event) {
        status.totalSearches++
    }
    
    void onResultsEvent(ResultsEvent event) {
        status.totalResponses++
    }
    
    void onUploadEvent(UploadEvent event) {
        if (event.first)
            status.totalUploadRequests++
        activeUploaders << event.uploader
    }
    
    private void collectBandwidth() {
        int total = 0
        synchronized (activeUploaders) {
            for (Uploader uploader: activeUploaders) {
                int data = uploader.dataSinceLastRead()
                status.totalUploadedBytes += data
                total += data
            }
        }
        synchronized (speedOutCounter) {
            speedOutCounter.read(total)
        }
    }
    
    void onUploadFinishedEvent(UploadFinishedEvent event) {
        activeUploaders.remove(event.uploader)
        status.totalUploadedBytes += event.uploader.dataSinceLastRead()
    }
    
    SeedboxStatus getStatus() {
        status.sharedFiles = core.getFileManager().getFileToSharedFile().size()
        
        int connectionsIn = 0
        int connectionsOut = 0
        for (Connection connection : core.getConnectionManager().getConnections()) {
            if (connection.incoming)
                connectionsIn ++
            else
                connectionsOut ++
        }
        status.connectionsIn = connectionsIn
        status.connectionsOut = connectionsOut
        
        status.uploadsInProgress = activeUploaders.size()
        
        synchronized(speedOutCounter) {
            status.speedOut = speedOutCounter.average()
        }

        HostCache hc = core.getHostCache()
        status.hostsKnown = hc.countAllHosts()
        status.hostsFailing = hc.countFailingHosts()
        status.hostsHopeless = hc.countHopelessHosts()
        
        status
    }
}
