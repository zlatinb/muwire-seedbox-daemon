package com.muwire.seedboxd

import com.muwire.core.Core
import com.muwire.core.MuWireSettings
import com.muwire.core.RouterConnectedEvent
import com.muwire.core.RouterDisconnectedEvent
import com.muwire.core.UILoadedEvent
import com.muwire.core.files.AllFilesLoadedEvent
import com.muwire.seedboxd.config.I2PConfig
import com.muwire.seedboxd.config.MuWireConfig
import org.springframework.stereotype.Service

import javax.annotation.PostConstruct

@Service
class CoreService {
    private final I2PConfig i2PProperties
    private final MuWireConfig muWireConfig
    
    private Core core
    volatile boolean allFilesLoaded
    volatile boolean i2pRouterConnected
    
    CoreService(I2PConfig i2PProperties, MuWireConfig muWireConfig) {
        this.i2PProperties = i2PProperties
        this.muWireConfig = muWireConfig
    }
    
    public Core getCore() {
        core
    }
    
    @PostConstruct
    void afterPropertiesSet() {
        // 1. create Home directory
        File home = muWireConfig.getWorkDir()
        if (!home.exists())
            home.mkdirs()
        
        // set i2p.properties
        def i2pProps = new Properties()
        i2pProps['i2cp.tcp.host'] = i2PProperties.getHost().getHostAddress()
        i2pProps['i2cp.tcp.port'] = String.valueOf(i2PProperties.getPort())
        
        String tunnelName = i2PProperties.getTunnelName()
        if (tunnelName == null)
            tunnelName = "MuWire Seedbox"
        i2pProps['inbound.nickname'] = tunnelName
        i2pProps['outbound.nickname'] = tunnelName
        
        File i2pPropsFile = new File(home, "i2p.properties")
        i2pPropsFile.withPrintWriter {i2pProps.store(it, "Do not edit this file")}
        
        // set up MuWire settings
        MuWireSettings muWireSettings = new MuWireSettings()
        muWireSettings.nickname = muWireConfig.getNickname()
        muWireSettings.disableUpdates = true
        // TODO: set reasonable defaults for other values
        
        core = new Core(muWireSettings, home, "0.8.12") // version doesn't matter
        core.eventBus.with {
            register(AllFilesLoadedEvent.class, this)
            register(RouterConnectedEvent.class, this)
            register(RouterDisconnectedEvent.class, this)
            
            publish(new UILoadedEvent())
        }
        core.startServices()
    }
    
    void onAllFilesLoadedEvent(AllFilesLoadedEvent event) {
        allFilesLoaded = true
    }
    
    void onRouterConnectedEvent(RouterConnectedEvent event) {
        i2pRouterConnected = true
    }
    
    void onRouterDisconnectedEvent(RouterDisconnectedEvent event) {
        i2pRouterConnected = false
    }
}
